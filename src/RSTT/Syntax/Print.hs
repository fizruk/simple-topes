{-# LANGUAGE CPP #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE LambdaCase #-}
#if __GLASGOW_HASKELL__ <= 708
{-# LANGUAGE OverlappingInstances #-}
#endif

{-# OPTIONS_GHC -fno-warn-incomplete-patterns #-}

-- | Pretty-printer for RSTT.
--   Generated by the BNF converter.

module RSTT.Syntax.Print where

import Prelude
  ( ($), (.)
  , Bool(..), (==), (<)
  , Int, Integer, Double, (+), (-), (*)
  , String, (++)
  , ShowS, showChar, showString
  , all, dropWhile, elem, foldr, id, map, null, replicate, shows, span
  )
import Data.Char ( Char, isSpace )
import qualified RSTT.Syntax.Abs

-- | The top-level printing method.

printTree :: Print a => a -> String
printTree = render . prt 0

type Doc = [ShowS] -> [ShowS]

doc :: ShowS -> Doc
doc = (:)

render :: Doc -> String
render d = rend 0 (map ($ "") $ d []) "" where
  rend i = \case
    "["      :ts -> showChar '[' . rend i ts
    "("      :ts -> showChar '(' . rend i ts
    "{"      :ts -> showChar '{' . new (i+1) . rend (i+1) ts
    "}" : ";":ts -> new (i-1) . space "}" . showChar ';' . new (i-1) . rend (i-1) ts
    "}"      :ts -> new (i-1) . showChar '}' . new (i-1) . rend (i-1) ts
    [";"]        -> showChar ';'
    ";"      :ts -> showChar ';' . new i . rend i ts
    t  : ts@(p:_) | closingOrPunctuation p -> showString t . rend i ts
    t        :ts -> space t . rend i ts
    _            -> id
  new i     = showChar '\n' . replicateS (2*i) (showChar ' ') . dropWhile isSpace
  space t s =
    case (all isSpace t', null spc, null rest) of
      (True , _   , True ) -> []              -- remove trailing space
      (False, _   , True ) -> t'              -- remove trailing space
      (False, True, False) -> t' ++ ' ' : s   -- add space if none
      _                    -> t' ++ s
    where
      t'          = showString t []
      (spc, rest) = span isSpace s

  closingOrPunctuation :: String -> Bool
  closingOrPunctuation [c] = c `elem` closerOrPunct
  closingOrPunctuation _   = False

  closerOrPunct :: String
  closerOrPunct = ")],;"

parenth :: Doc -> Doc
parenth ss = doc (showChar '(') . ss . doc (showChar ')')

concatS :: [ShowS] -> ShowS
concatS = foldr (.) id

concatD :: [Doc] -> Doc
concatD = foldr (.) id

replicateS :: Int -> ShowS -> ShowS
replicateS n f = concatS (replicate n f)

-- | The printer class does the job.

class Print a where
  prt :: Int -> a -> Doc
  prtList :: Int -> [a] -> Doc
  prtList i = concatD . map (prt i)

instance {-# OVERLAPPABLE #-} Print a => Print [a] where
  prt = prtList

instance Print Char where
  prt     _ s = doc (showChar '\'' . mkEsc '\'' s . showChar '\'')
  prtList _ s = doc (showChar '"' . concatS (map (mkEsc '"') s) . showChar '"')

mkEsc :: Char -> Char -> ShowS
mkEsc q = \case
  s | s == q -> showChar '\\' . showChar s
  '\\' -> showString "\\\\"
  '\n' -> showString "\\n"
  '\t' -> showString "\\t"
  s -> showChar s

prPrec :: Int -> Int -> Doc -> Doc
prPrec i j = if j < i then parenth else id

instance Print Integer where
  prt _ x = doc (shows x)

instance Print Double where
  prt _ x = doc (shows x)

instance Print RSTT.Syntax.Abs.Label where
  prt _ (RSTT.Syntax.Abs.Label i) = doc $ showString i

instance Print RSTT.Syntax.Abs.Var where
  prt _ (RSTT.Syntax.Abs.Var i) = doc $ showString i

instance Print RSTT.Syntax.Abs.Line where
  prt _ (RSTT.Syntax.Abs.Line i) = doc $ showString i

instance Print RSTT.Syntax.Abs.Program where
  prt i = \case
    RSTT.Syntax.Abs.Program decls -> prPrec i 0 (concatD [prt 0 decls])

instance Print RSTT.Syntax.Abs.Decl where
  prt i = \case
    RSTT.Syntax.Abs.DeclCube label pointcondecls -> prPrec i 0 (concatD [doc (showString "cube"), prt 0 label, doc (showString "with"), doc (showString "{"), prt 0 pointcondecls, doc (showString "}")])
    RSTT.Syntax.Abs.DeclTopePrefix label cubes toperules -> prPrec i 0 (concatD [doc (showString "tope"), prt 0 label, doc (showString "("), prt 0 cubes, doc (showString ")"), doc (showString "with"), doc (showString "{"), prt 0 toperules, doc (showString "}")])
    RSTT.Syntax.Abs.DeclCommandProve sequent -> prPrec i 0 (concatD [doc (showString "prove"), doc (showString "{"), prt 0 sequent, doc (showString "}")])
  prtList _ [] = concatD []
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString ";"), prt 0 xs]

instance Print [RSTT.Syntax.Abs.Decl] where
  prt = prtList

instance Print RSTT.Syntax.Abs.PointConDecl where
  prt i = \case
    RSTT.Syntax.Abs.NullaryPointConDecl label -> prPrec i 0 (concatD [doc (showString "point"), prt 0 label])
    RSTT.Syntax.Abs.PrefixPointConDecl label cubes -> prPrec i 0 (concatD [doc (showString "point"), prt 0 label, doc (showString "("), prt 0 cubes, doc (showString ")")])
  prtList _ [] = concatD []
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString ";"), prt 0 xs]

instance Print [RSTT.Syntax.Abs.PointConDecl] where
  prt = prtList

instance Print RSTT.Syntax.Abs.Cube where
  prt i = \case
    RSTT.Syntax.Abs.CubeProduct cube1 cube2 -> prPrec i 0 (concatD [prt 0 cube1, doc (showString "\215"), prt 1 cube2])
    RSTT.Syntax.Abs.CubeUnit -> prPrec i 1 (concatD [doc (showString "\120793")])
    RSTT.Syntax.Abs.CubeCon label -> prPrec i 1 (concatD [prt 0 label])
    RSTT.Syntax.Abs.CubeVar var -> prPrec i 1 (concatD [prt 0 var])
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print [RSTT.Syntax.Abs.Cube] where
  prt = prtList

instance Print RSTT.Syntax.Abs.TopeRule where
  prt i = \case
    RSTT.Syntax.Abs.TopeRule rulename sequents line sequent -> prPrec i 0 (concatD [doc (showString "rule"), prt 0 rulename, doc (showString "where"), doc (showString "{"), prt 0 sequents, prt 0 line, doc (showString ";"), prt 0 sequent, doc (showString "}")])
  prtList _ [] = concatD []
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString ";"), prt 0 xs]

instance Print [RSTT.Syntax.Abs.TopeRule] where
  prt = prtList

instance Print RSTT.Syntax.Abs.RuleName where
  prt i = \case
    RSTT.Syntax.Abs.RuleName str -> prPrec i 0 (concatD [prt 0 str])

instance Print RSTT.Syntax.Abs.Sequent where
  prt i = \case
    RSTT.Syntax.Abs.Sequent cubecontext topecontext tope -> prPrec i 0 (concatD [prt 0 cubecontext, doc (showString "|"), prt 0 topecontext, doc (showString "\8866"), prt 0 tope])
  prtList _ [] = concatD []
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString ";"), prt 0 xs]

instance Print [RSTT.Syntax.Abs.Sequent] where
  prt = prtList

instance Print RSTT.Syntax.Abs.CubeContext where
  prt i = \case
    RSTT.Syntax.Abs.CubeContextEmpty -> prPrec i 0 (concatD [doc (showString "\8901")])
    RSTT.Syntax.Abs.CubeContextNonEmpty pointdecls -> prPrec i 0 (concatD [prt 0 pointdecls])

instance Print RSTT.Syntax.Abs.PointDecl where
  prt i = \case
    RSTT.Syntax.Abs.PointDecl var cube -> prPrec i 0 (concatD [prt 0 var, doc (showString ":"), prt 0 cube])
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print [RSTT.Syntax.Abs.PointDecl] where
  prt = prtList

instance Print RSTT.Syntax.Abs.TopeContext where
  prt i = \case
    RSTT.Syntax.Abs.TopeContextEmpty -> prPrec i 0 (concatD [doc (showString "\8901")])
    RSTT.Syntax.Abs.TopeContextNonEmpty topes -> prPrec i 0 (concatD [prt 0 topes])

instance Print RSTT.Syntax.Abs.Tope where
  prt i = \case
    RSTT.Syntax.Abs.TopeTop -> prPrec i 0 (concatD [doc (showString "\8868")])
    RSTT.Syntax.Abs.TopeBottom -> prPrec i 0 (concatD [doc (showString "\8869")])
    RSTT.Syntax.Abs.TopeImplies tope1 tope2 -> prPrec i 0 (concatD [prt 0 tope1, doc (showString "\8658"), prt 1 tope2])
    RSTT.Syntax.Abs.TopeOr tope1 tope2 -> prPrec i 1 (concatD [prt 1 tope1, doc (showString "\8744"), prt 2 tope2])
    RSTT.Syntax.Abs.TopeAnd tope1 tope2 -> prPrec i 2 (concatD [prt 2 tope1, doc (showString "\8743"), prt 3 tope2])
    RSTT.Syntax.Abs.TopeEQ point1 point2 -> prPrec i 3 (concatD [prt 0 point1, doc (showString "\8801"), prt 0 point2])
    RSTT.Syntax.Abs.TopeCon label points -> prPrec i 3 (concatD [prt 0 label, doc (showString "("), prt 0 points, doc (showString ")")])
    RSTT.Syntax.Abs.TopeVar var -> prPrec i 3 (concatD [prt 0 var])
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print [RSTT.Syntax.Abs.Tope] where
  prt = prtList

instance Print RSTT.Syntax.Abs.Point where
  prt i = \case
    RSTT.Syntax.Abs.PointUnit -> prPrec i 0 (concatD [doc (showString "\8902")])
    RSTT.Syntax.Abs.PointPair point1 point2 -> prPrec i 0 (concatD [doc (showString "\10216"), prt 0 point1, doc (showString ","), prt 0 point2, doc (showString "\10217")])
    RSTT.Syntax.Abs.PointFirst point -> prPrec i 0 (concatD [doc (showString "\120587\8321"), doc (showString "("), prt 0 point, doc (showString ")")])
    RSTT.Syntax.Abs.PointSecond point -> prPrec i 0 (concatD [doc (showString "\120587\8322"), doc (showString "("), prt 0 point, doc (showString ")")])
    RSTT.Syntax.Abs.PointCon label points -> prPrec i 0 (concatD [prt 0 label, doc (showString "("), prt 0 points, doc (showString ")")])
    RSTT.Syntax.Abs.PointVar var -> prPrec i 0 (concatD [prt 0 var])
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print [RSTT.Syntax.Abs.Point] where
  prt = prtList

