-- Haskell module generated by the BNF converter

{-# OPTIONS_GHC -fno-warn-unused-matches #-}

module RSTT.Syntax.Skel where

import Prelude (($), Either(..), String, (++), Show, show)
import qualified RSTT.Syntax.Abs

type Err = Either String
type Result = Err String

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transLabel :: RSTT.Syntax.Abs.Label -> Result
transLabel x = case x of
  RSTT.Syntax.Abs.Label string -> failure x

transVar :: RSTT.Syntax.Abs.Var -> Result
transVar x = case x of
  RSTT.Syntax.Abs.Var string -> failure x

transLine :: RSTT.Syntax.Abs.Line -> Result
transLine x = case x of
  RSTT.Syntax.Abs.Line string -> failure x

transProgram :: RSTT.Syntax.Abs.Program -> Result
transProgram x = case x of
  RSTT.Syntax.Abs.Program decls -> failure x

transDecl :: RSTT.Syntax.Abs.Decl -> Result
transDecl x = case x of
  RSTT.Syntax.Abs.DeclCube label pointcondecls -> failure x
  RSTT.Syntax.Abs.DeclTopePrefix label cubes toperules -> failure x
  RSTT.Syntax.Abs.DeclCommandProve sequent -> failure x

transPointConDecl :: RSTT.Syntax.Abs.PointConDecl -> Result
transPointConDecl x = case x of
  RSTT.Syntax.Abs.NullaryPointConDecl label -> failure x
  RSTT.Syntax.Abs.PrefixPointConDecl label cubes -> failure x

transCube :: RSTT.Syntax.Abs.Cube -> Result
transCube x = case x of
  RSTT.Syntax.Abs.CubeProduct cube1 cube2 -> failure x
  RSTT.Syntax.Abs.CubeUnit -> failure x
  RSTT.Syntax.Abs.CubeCon label -> failure x
  RSTT.Syntax.Abs.CubeVar var -> failure x

transTopeRule :: RSTT.Syntax.Abs.TopeRule -> Result
transTopeRule x = case x of
  RSTT.Syntax.Abs.TopeRule rulename sequents line sequent -> failure x

transRuleName :: RSTT.Syntax.Abs.RuleName -> Result
transRuleName x = case x of
  RSTT.Syntax.Abs.RuleName string -> failure x

transSequent :: RSTT.Syntax.Abs.Sequent -> Result
transSequent x = case x of
  RSTT.Syntax.Abs.Sequent cubecontext topecontext tope -> failure x

transCubeContext :: RSTT.Syntax.Abs.CubeContext -> Result
transCubeContext x = case x of
  RSTT.Syntax.Abs.CubeContextEmpty -> failure x
  RSTT.Syntax.Abs.CubeContextNonEmpty pointdecls -> failure x

transPointDecl :: RSTT.Syntax.Abs.PointDecl -> Result
transPointDecl x = case x of
  RSTT.Syntax.Abs.PointDecl var cube -> failure x

transTopeContext :: RSTT.Syntax.Abs.TopeContext -> Result
transTopeContext x = case x of
  RSTT.Syntax.Abs.TopeContextEmpty -> failure x
  RSTT.Syntax.Abs.TopeContextNonEmpty topes -> failure x

transTope :: RSTT.Syntax.Abs.Tope -> Result
transTope x = case x of
  RSTT.Syntax.Abs.TopeTop -> failure x
  RSTT.Syntax.Abs.TopeBottom -> failure x
  RSTT.Syntax.Abs.TopeImplies tope1 tope2 -> failure x
  RSTT.Syntax.Abs.TopeOr tope1 tope2 -> failure x
  RSTT.Syntax.Abs.TopeAnd tope1 tope2 -> failure x
  RSTT.Syntax.Abs.TopeEQ point1 point2 -> failure x
  RSTT.Syntax.Abs.TopeCon label points -> failure x
  RSTT.Syntax.Abs.TopeVar var -> failure x

transPoint :: RSTT.Syntax.Abs.Point -> Result
transPoint x = case x of
  RSTT.Syntax.Abs.PointUnit -> failure x
  RSTT.Syntax.Abs.PointPair point1 point2 -> failure x
  RSTT.Syntax.Abs.PointFirst point -> failure x
  RSTT.Syntax.Abs.PointSecond point -> failure x
  RSTT.Syntax.Abs.PointCon label points -> failure x
  RSTT.Syntax.Abs.PointVar var -> failure x
