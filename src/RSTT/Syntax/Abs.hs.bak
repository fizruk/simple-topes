-- Haskell data types for the abstract syntax.
-- Generated by the BNF converter.

{-# LANGUAGE GeneralizedNewtypeDeriving #-}

-- | The abstract syntax of language Syntax.

module RSTT.Syntax.Abs where

import Prelude (String)
import qualified Prelude as C (Eq, Ord, Show, Read)
import qualified Data.String

data Program = Program [Decl]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Decl
    = DeclCube Label [PointConDecl]
    | DeclTopePrefix Label [Cube] [TopeRule]
    | DeclCommandProve Sequent
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data PointConDecl
    = NullaryPointConDecl Label | PrefixPointConDecl Label [Cube]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Cube
    = CubeProduct Cube Cube | CubeUnit | CubeCon Label | CubeVar Var
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data TopeRule = TopeRule RuleName [Sequent] Line Sequent
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data RuleName = RuleName String
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Sequent = Sequent CubeContext TopeContext Tope
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data CubeContext
    = CubeContextEmpty | CubeContextNonEmpty [PointDecl]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data PointDecl = PointDecl Var Cube
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data TopeContext = TopeContextEmpty | TopeContextNonEmpty [Tope]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Tope
    = TopeImplies Tope Tope
    | TopeOr Tope Tope
    | TopeAnd Tope Tope
    | TopeEQ Point Point
    | TopeCon Label [Point]
    | TopeVar Var
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Point
    = PointUnit
    | PointPair Point Point
    | PointFirst Point
    | PointSecond Point
    | PointCon Label [Point]
    | PointVar Var
  deriving (C.Eq, C.Ord, C.Show, C.Read)

nullaryPoint :: Label -> Point
nullaryPoint con = PointCon con []

newtype Label = Label String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

newtype Var = Var String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

newtype Line = Line String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

